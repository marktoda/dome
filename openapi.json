{
  "openapi": "3.1.0",
  "info": {
    "title": "Dome API",
    "version": "v1"
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""
      }
    },
    "schemas": {
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT authentication token",
            "example": "eyJhbGciOiJIUzI1NiIs…"
          }
        },
        "required": [
          "token"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              false
            ],
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "example": "UNAUTHORIZED"
              },
              "message": {
                "type": "string",
                "example": "Authentication failed"
              }
            },
            "required": [
              "code",
              "message"
            ]
          }
        },
        "required": [
          "success",
          "error"
        ]
      },
      "LoginBody": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "mark@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "User's password (min 8 characters)",
            "example": "hunter2"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "RegisterResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT authentication token after registration",
            "example": "eyJhbGciOiJIUzI1NiIs…"
          }
        },
        "required": [
          "token"
        ]
      },
      "RegisterBody": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "New user's email address",
            "example": "newuser@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "New user's password (min 8 characters)",
            "example": "securepassword123"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "New user's full name",
            "example": "New User"
          }
        },
        "required": [
          "email",
          "password",
          "name"
        ]
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ],
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Logout successful"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "user-123"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "example": "User Name"
          },
          "role": {
            "type": "string",
            "example": "user"
          },
          "emailVerified": {
            "type": "boolean",
            "example": true
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "lastLoginAt": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "authProvider": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "local",
              "privy",
              "google",
              "github"
            ],
            "example": "local"
          },
          "providerAccountId": {
            "type": [
              "string",
              "null"
            ],
            "example": "user@example.com"
          }
        },
        "required": [
          "id",
          "email",
          "role",
          "createdAt",
          "updatedAt"
        ]
      },
      "DomeApiValidateTokenResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ],
            "example": true
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserProfile"
              },
              {
                "type": "object",
                "properties": {
                  "provider": {
                    "type": "string",
                    "enum": [
                      "local",
                      "privy",
                      "google",
                      "github"
                    ],
                    "description": "The authentication provider used.",
                    "example": "local"
                  }
                },
                "required": [
                  "provider"
                ]
              }
            ]
          }
        },
        "required": [
          "success",
          "user"
        ]
      },
      "RootResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Welcome to the dome API"
          },
          "service": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "dome-api"
              },
              "version": {
                "type": "string",
                "example": "0.1.0"
              },
              "environment": {
                "type": "string",
                "example": "development"
              }
            },
            "required": [
              "name",
              "version",
              "environment"
            ]
          },
          "description": {
            "type": "string",
            "example": "AI-Powered Exobrain API service"
          }
        },
        "required": [
          "message",
          "service",
          "description"
        ]
      },
      "HealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ok"
            ],
            "example": "ok"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2025-05-13T16:30:35.503Z"
          },
          "service": {
            "type": "string",
            "example": "dome-api"
          },
          "version": {
            "type": "string",
            "example": "0.1.0"
          },
          "metrics": {
            "type": "object",
            "properties": {
              "counters": {
                "type": "object",
                "properties": {
                  "requests": {
                    "type": "integer",
                    "example": 100
                  },
                  "errors": {
                    "type": "integer",
                    "example": 5
                  }
                }
              }
            },
            "required": [
              "counters"
            ]
          }
        },
        "required": [
          "status",
          "timestamp",
          "service",
          "version"
        ]
      },
      "ChatSource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "doc_123"
          },
          "type": {
            "type": "string",
            "example": "document"
          },
          "title": {
            "type": "string",
            "example": "Source Document Title"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/doc_123"
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "ChatSuccessData": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string",
            "example": "This is the chat bot's answer."
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatSource"
            },
            "description": "Supporting sources for the response."
          }
        },
        "required": [
          "response"
        ]
      },
      "ChatSuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ],
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/ChatSuccessData"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ChatErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              false
            ],
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "example": "INVALID_REQUEST"
              },
              "message": {
                "type": "string",
                "example": "Invalid request format"
              }
            },
            "required": [
              "code",
              "message"
            ]
          }
        },
        "required": [
          "success",
          "error"
        ]
      },
      "Note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "note_123abc"
          },
          "userId": {
            "type": [
              "string",
              "null"
            ],
            "example": "user_xyz"
          },
          "category": {
            "type": "string",
            "enum": [
              "note",
              "code",
              "document",
              "article",
              "other"
            ],
            "example": "note"
          },
          "title": {
            "type": [
              "string",
              "null"
            ],
            "example": "My Note Title"
          },
          "content": {
            "type": [
              "string",
              "null"
            ],
            "example": "This is the note content."
          },
          "mimeType": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "text/plain",
                  "text/markdown",
                  "text/html",
                  "application/json",
                  "application/javascript",
                  "application/python",
                  "application/pdf",
                  "image/jpeg",
                  "image/png"
                ]
              },
              {
                "type": "string"
              }
            ],
            "example": "text/markdown"
          },
          "size": {
            "type": "number",
            "example": 123
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T12:00:00Z"
          },
          "url": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "description": "URL for large content"
          },
          "customMetadata": {
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {},
            "description": "Custom metadata"
          }
        },
        "required": [
          "id",
          "userId",
          "category",
          "mimeType",
          "size",
          "createdAt"
        ]
      },
      "IngestNoteBodyAPISchema": {
        "type": "object",
        "properties": {
          "title": {
            "type": [
              "string",
              "null"
            ],
            "example": "New Note from API"
          },
          "content": {
            "type": "string",
            "example": "Content for the new note."
          },
          "category": {
            "type": "string",
            "enum": [
              "note",
              "code",
              "document",
              "article",
              "other"
            ],
            "description": "Defaults to 'note' if not provided",
            "example": "note"
          },
          "mimeType": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "text/plain",
                  "text/markdown",
                  "text/html",
                  "application/json",
                  "application/javascript",
                  "application/python",
                  "application/pdf",
                  "image/jpeg",
                  "image/png"
                ]
              },
              {
                "type": "string"
              }
            ],
            "description": "Defaults to 'text/markdown' if not provided",
            "example": "text/markdown"
          }
        },
        "required": [
          "content"
        ]
      },
      "DeleteSuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ],
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Note deleted successfully"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "SearchResultItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "content_id_123"
          },
          "title": {
            "type": "string",
            "example": "My Search Result"
          },
          "summary": {
            "type": "string",
            "example": "A brief summary of the result."
          },
          "body": {
            "type": "string",
            "example": "The full body content (can be large)..."
          },
          "category": {
            "type": "string",
            "example": "note"
          },
          "mimeType": {
            "type": "string",
            "example": "text/markdown"
          },
          "createdAt": {
            "type": "integer",
            "description": "Unix timestamp (milliseconds)",
            "example": 1678886400000
          },
          "updatedAt": {
            "type": "integer",
            "description": "Unix timestamp (milliseconds)",
            "example": 1678886400000
          },
          "score": {
            "type": "number",
            "example": 0.85
          }
        },
        "required": [
          "id",
          "title",
          "summary",
          "category",
          "mimeType",
          "createdAt",
          "score"
        ]
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "example": 100
          },
          "limit": {
            "type": "integer",
            "example": 10
          },
          "offset": {
            "type": "integer",
            "example": 0
          },
          "hasMore": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "total",
          "limit",
          "offset",
          "hasMore"
        ]
      },
      "SearchResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ],
            "example": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResultItem"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "query": {
            "type": "string",
            "example": "test query"
          },
          "message": {
            "type": "string",
            "example": "Use at least 3 characters for better results."
          }
        },
        "required": [
          "success",
          "results",
          "pagination",
          "query"
        ]
      },
      "SearchErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              false
            ],
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "example": "VALIDATION_ERROR"
              },
              "message": {
                "type": "string",
                "example": "Invalid search parameters"
              },
              "details": {
                "example": [
                  {
                    "path": [
                      "q"
                    ],
                    "message": "Search query is required"
                  }
                ]
              }
            },
            "required": [
              "code",
              "message"
            ]
          }
        },
        "required": [
          "success",
          "error"
        ]
      },
      "StreamingMetadata": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "metadata"
            ]
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "query": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "pagination",
          "query"
        ]
      },
      "StreamingResultData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "result"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SearchResultItem"
          }
        },
        "required": [
          "type",
          "data"
        ]
      },
      "StreamingErrorData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "error"
            ]
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "example": "SEARCH_ERROR"
              },
              "message": {
                "type": "string",
                "example": "An error occurred during streaming."
              }
            },
            "required": [
              "code",
              "message"
            ]
          }
        },
        "required": [
          "type",
          "error"
        ]
      },
      "StreamingSearchEvent": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/StreamingMetadata"
          },
          {
            "$ref": "#/components/schemas/StreamingResultData"
          },
          {
            "$ref": "#/components/schemas/StreamingErrorData"
          }
        ]
      },
      "GithubRepoResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "gh_repo_123"
          },
          "owner": {
            "type": "string",
            "example": "my-org"
          },
          "name": {
            "type": "string",
            "example": "my-repo"
          }
        },
        "required": [
          "id",
          "owner",
          "name"
        ]
      },
      "RegisterGithubRepoBody": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "example": "my-org"
          },
          "repo": {
            "type": "string",
            "example": "my-repo"
          }
        },
        "required": [
          "owner",
          "repo"
        ]
      },
      "SyncHistoryItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "sync_hist_abc"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2025-05-13T16:30:35.479Z"
          },
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "eventCount": {
            "type": "integer",
            "example": 150
          },
          "summary": {
            "type": [
              "string",
              "null"
            ],
            "example": "Synced 150 items."
          }
        },
        "required": [
          "id",
          "timestamp",
          "status"
        ]
      },
      "SyncHistoryResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SyncHistoryItem"
        }
      },
      "NotionWorkspaceResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "notion_ws_123"
          },
          "name": {
            "type": "string",
            "example": "My Team Workspace"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "NotionErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              false
            ],
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "example": "NOT_FOUND"
              },
              "message": {
                "type": "string",
                "example": "Resource not found"
              }
            },
            "required": [
              "code",
              "message"
            ]
          }
        },
        "required": [
          "success",
          "error"
        ]
      },
      "RegisterNotionWorkspaceBody": {
        "type": "object",
        "properties": {
          "botId": {
            "type": "string",
            "example": "abc-123-def-456"
          },
          "accessToken": {
            "type": "string",
            "example": "secret_..."
          },
          "workspaceName": {
            "type": "string",
            "example": "My Team Workspace"
          }
        }
      },
      "NotionSyncHistoryItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "sync_hist_notion_abc"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2025-05-13T16:30:35.483Z"
          },
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "details": {
            "type": "string",
            "example": "Synced 50 pages."
          }
        },
        "required": [
          "id",
          "timestamp",
          "status"
        ]
      },
      "NotionSyncHistoryResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/NotionSyncHistoryItem"
        }
      },
      "NotionGenericSuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success"
        ]
      },
      "ConfigureNotionOAuthBody": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "example": "oauth_client_id_..."
          },
          "clientSecret": {
            "type": "string",
            "example": "oauth_client_secret_..."
          },
          "redirectUri": {
            "type": "string",
            "format": "uri",
            "example": "https://myapp.com/oauth/callback/notion"
          }
        }
      },
      "NotionOAuthUrlResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.notion.com/v1/oauth/authorize?client_id=..."
          }
        },
        "required": [
          "url"
        ]
      },
      "StoreNotionIntegrationBody": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "auth_code_from_notion"
          },
          "state": {
            "type": "string",
            "example": "csrf_state_token"
          }
        },
        "required": [
          "code"
        ]
      },
      "ReprocessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "message": {
            "type": "string"
          },
          "reprocessedCount": {
            "type": "number"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "ReprocessBody": {
        "type": "object",
        "properties": {
          "contentId": {
            "type": "string",
            "example": "content_abc123"
          }
        },
        "required": [
          "contentId"
        ]
      },
      "BulkReprocessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "message": {
            "type": "string"
          },
          "reprocessedCount": {
            "type": "number"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "BulkReprocessBody": {
        "type": "object",
        "properties": {
          "contentIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1
          }
        },
        "required": [
          "contentIds"
        ]
      }
    },
    "parameters": {}
  },
  "paths": {
    "/auth/login": {
      "post": {
        "summary": "User Login",
        "description": "Authenticates a user and returns a JWT token upon successful login.",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful, JWT issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., validation error).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials or unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "summary": "User Registration",
        "description": "Registers a new user and returns a JWT token.",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully, JWT issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., validation error).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict (e.g., user already exists).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "User Logout",
        "description": "Invalidates the user's session/token.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Logout successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (e.g., missing or invalid token).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during logout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/validate": {
      "post": {
        "summary": "Validate Authentication Token",
        "description": "Validates the provided JWT and returns user information if valid.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Token is valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomeApiValidateTokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (e.g., missing, invalid, or expired token).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "API Root",
        "description": "Provides basic information about the API service.",
        "tags": [
          "Public"
        ],
        "responses": {
          "200": {
            "description": "Service information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootResponse"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Checks the health status of the API service.",
        "tags": [
          "Public"
        ],
        "responses": {
          "200": {
            "description": "Service is healthy.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chat/ws": {
      "get": {
        "summary": "Upgrade to WebSocket for Chat",
        "description": "Initiates a WebSocket connection for real-time chat. Requires a valid authentication token as a query parameter. Upon successful upgrade, the protocol switches to WebSocket. Messages over WebSocket should follow the documented format (e.g., JSON with type and payload).",
        "tags": [
          "Chat",
          "WebSocket"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Authentication token for WebSocket upgrade.",
              "example": "jwt_token_here"
            },
            "required": false,
            "name": "token",
            "in": "query"
          }
        ],
        "responses": {
          "101": {
            "description": "Switching Protocols. Connection will be upgraded to WebSocket."
          },
          "401": {
            "description": "Unauthorized. Token missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/chat": {
      "post": {
        "summary": "Send a chat message",
        "description": "Processes a user chat message and returns a response.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Chat"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stream": {
                    "type": "boolean",
                    "default": true
                  },
                  "userId": {
                    "type": "string"
                  },
                  "messages": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "enum": [
                            "user",
                            "assistant",
                            "system"
                          ]
                        },
                        "content": {
                          "type": "string"
                        },
                        "timestamp": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "role",
                        "content"
                      ]
                    }
                  },
                  "options": {
                    "type": "object",
                    "properties": {
                      "enhanceWithContext": {
                        "type": "boolean",
                        "default": true
                      },
                      "maxContextItems": {
                        "type": "number",
                        "default": 5
                      },
                      "includeSourceInfo": {
                        "type": "boolean",
                        "default": true
                      },
                      "maxTokens": {
                        "type": "number",
                        "default": 1000
                      },
                      "temperature": {
                        "type": "number"
                      },
                      "modelId": {
                        "type": "string"
                      }
                    }
                  },
                  "runId": {
                    "type": "string"
                  }
                },
                "required": [
                  "userId",
                  "messages",
                  "options"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful chat response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., validation error).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/notes": {
      "post": {
        "summary": "Ingest a new note",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Notes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestNoteBodyAPISchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Note ingested.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List notes",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "default": 50,
              "example": 50
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "minimum": 0,
              "default": 0,
              "example": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "note",
                "code",
                "document",
                "article",
                "other"
              ],
              "example": "note"
            },
            "required": false,
            "name": "category",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of notes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Note"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/notes/{id}": {
      "get": {
        "summary": "Get a note by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier for the note.",
              "example": "note_123abc"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested note.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Note not found.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a note",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier for the note.",
              "example": "note_123abc"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Note deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Note not found.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "summary": "Search Content",
        "description": "Performs a paginated search over indexed content.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Search"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "q",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "default": 10
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "minimum": 0,
              "default": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "category",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "mimeType",
            "in": "query"
          },
          {
            "schema": {
              "type": [
                "integer",
                "null"
              ]
            },
            "required": false,
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": [
                "integer",
                "null"
              ]
            },
            "required": false,
            "name": "endDate",
            "in": "query"
          },
          {
            "schema": {
              "type": [
                "boolean",
                "null"
              ],
              "default": true
            },
            "required": false,
            "name": "useCache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful search results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., validation error).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/search/stream": {
      "get": {
        "summary": "Stream Search Content (NDJSON)",
        "description": "Performs a search and streams results as NDJSON events.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Search"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "q",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "default": 10
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "minimum": 0,
              "default": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "category",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "mimeType",
            "in": "query"
          },
          {
            "schema": {
              "type": [
                "integer",
                "null"
              ]
            },
            "required": false,
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": [
                "integer",
                "null"
              ]
            },
            "required": false,
            "name": "endDate",
            "in": "query"
          },
          {
            "schema": {
              "type": [
                "boolean",
                "null"
              ],
              "default": true
            },
            "required": false,
            "name": "useCache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Stream of search events (metadata, results, errors) in NDJSON format.",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "$ref": "#/components/schemas/StreamingSearchEvent"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., validation error).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/content/github": {
      "post": {
        "summary": "Register GitHub Repository",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content - GitHub"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterGithubRepoBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Repository registered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubRepoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/content/github/{owner}/{repo}/history": {
      "get": {
        "summary": "Get GitHub Repository Sync History",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content - GitHub"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "my-org"
            },
            "required": true,
            "name": "owner",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "example": "my-repo"
            },
            "required": true,
            "name": "repo",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sync history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncHistoryResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/content/sync/user/{userId}/history": {
      "get": {
        "summary": "Get User Sync History",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content - Sync"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "user_123"
            },
            "required": true,
            "name": "userId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "User sync history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncHistoryResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (if trying to access another user's history without admin rights).",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/content/sync/plan/{syncPlanId}/history": {
      "get": {
        "summary": "Get Sync Plan History",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content - Sync"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "plan_abc"
            },
            "required": true,
            "name": "syncPlanId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sync plan history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncHistoryResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/content/notion": {
      "post": {
        "summary": "Register Notion Workspace",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content - Notion"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterNotionWorkspaceBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Workspace registered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionWorkspaceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/content/notion/{workspaceId}/history": {
      "get": {
        "summary": "Get Notion Workspace Sync History",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content - Notion"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "notion_ws_123"
            },
            "required": true,
            "name": "workspaceId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sync history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionSyncHistoryResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/content/notion/{workspaceId}/sync": {
      "post": {
        "summary": "Trigger Notion Workspace Sync",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content - Notion"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "notion_ws_123"
            },
            "required": true,
            "name": "workspaceId",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Sync triggered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionGenericSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/content/notion/oauth/configure": {
      "post": {
        "summary": "Configure Notion OAuth Credentials (Internal/Admin)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content - Notion",
          "OAuth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigureNotionOAuthBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth configured.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionGenericSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/content/notion/oauth/url": {
      "get": {
        "summary": "Get Notion OAuth Authorization URL",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content - Notion",
          "OAuth"
        ],
        "responses": {
          "200": {
            "description": "OAuth URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionOAuthUrlResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/content/notion/oauth/store": {
      "post": {
        "summary": "Store Notion OAuth Integration (Callback)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content - Notion",
          "OAuth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreNotionIntegrationBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Integration stored.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionGenericSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotionErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ai/reprocess": {
      "post": {
        "summary": "Reprocess AI metadata",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "AI"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReprocessBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Reprocessing initiated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReprocessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Content not found.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/ai/bulk-reprocess": {
      "post": {
        "summary": "Bulk reprocess AI metadata",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "AI"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkReprocessBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Bulk reprocessing initiated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkReprocessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "enum": [
                            false
                          ],
                          "example": false
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "example": "NOT_FOUND"
                            },
                            "message": {
                              "type": "string",
                              "example": "Resource not found"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {}
}