/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as DomeApi from "../../../index";
export declare namespace Search {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Search {
    protected readonly _options: Search.Options;
    constructor(_options: Search.Options);
    /**
     * Performs a paginated search over indexed content.
     *
     * @param {DomeApi.GetSearchRequest} request
     * @param {Search.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.BadRequestError}
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.search.searchContent({
     *         q: "q"
     *     })
     */
    searchContent(request: DomeApi.GetSearchRequest, requestOptions?: Search.RequestOptions): Promise<DomeApi.SearchResponse>;
    /**
     * Performs a search and streams results as NDJSON events.
     *
     * @param {DomeApi.GetSearchStreamRequest} request
     * @param {Search.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.BadRequestError}
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.search.streamSearchContentNdjson({
     *         q: "q"
     *     })
     */
    streamSearchContentNdjson(request: DomeApi.GetSearchStreamRequest, requestOptions?: Search.RequestOptions): Promise<DomeApi.StreamingSearchEvent>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
