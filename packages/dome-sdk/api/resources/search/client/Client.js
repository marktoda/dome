"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Search = void 0;
const core = __importStar(require("../../../../core"));
const DomeApi = __importStar(require("../../../index"));
const url_join_1 = __importDefault(require("url-join"));
const serializers = __importStar(require("../../../../serialization/index"));
const errors = __importStar(require("../../../../errors/index"));
class Search {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * Performs a paginated search over indexed content.
     *
     * @param {DomeApi.GetSearchRequest} request
     * @param {Search.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.BadRequestError}
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.search.searchContent({
     *         q: "q"
     *     })
     */
    searchContent(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const { q, limit, offset, category, mimeType, startDate, endDate, useCache } = request;
            const _queryParams = {};
            _queryParams["q"] = q;
            if (limit != null) {
                _queryParams["limit"] = limit.toString();
            }
            if (offset != null) {
                _queryParams["offset"] = offset.toString();
            }
            if (category != null) {
                _queryParams["category"] = category;
            }
            if (mimeType != null) {
                _queryParams["mimeType"] = mimeType;
            }
            if (startDate != null) {
                _queryParams["startDate"] = startDate.toString();
            }
            if (endDate != null) {
                _queryParams["endDate"] = endDate.toString();
            }
            if (useCache != null) {
                _queryParams["useCache"] = useCache.toString();
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), "search"),
                method: "GET",
                headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return serializers.SearchResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new DomeApi.BadRequestError(_response.error.body);
                    case 401:
                        throw new DomeApi.UnauthorizedError(_response.error.body);
                    case 500:
                        throw new DomeApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.DomeApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.DomeApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.DomeApiTimeoutError("Timeout exceeded when calling GET /search.");
                case "unknown":
                    throw new errors.DomeApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Performs a search and streams results as NDJSON events.
     *
     * @param {DomeApi.GetSearchStreamRequest} request
     * @param {Search.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.BadRequestError}
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.search.streamSearchContentNdjson({
     *         q: "q"
     *     })
     */
    streamSearchContentNdjson(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const { q, limit, offset, category, mimeType, startDate, endDate, useCache } = request;
            const _queryParams = {};
            _queryParams["q"] = q;
            if (limit != null) {
                _queryParams["limit"] = limit.toString();
            }
            if (offset != null) {
                _queryParams["offset"] = offset.toString();
            }
            if (category != null) {
                _queryParams["category"] = category;
            }
            if (mimeType != null) {
                _queryParams["mimeType"] = mimeType;
            }
            if (startDate != null) {
                _queryParams["startDate"] = startDate.toString();
            }
            if (endDate != null) {
                _queryParams["endDate"] = endDate.toString();
            }
            if (useCache != null) {
                _queryParams["useCache"] = useCache.toString();
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment)), "search/stream"),
                method: "GET",
                headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Fern-Language": "JavaScript", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return serializers.StreamingSearchEvent.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new DomeApi.BadRequestError(_response.error.body);
                    case 401:
                        throw new DomeApi.UnauthorizedError(_response.error.body);
                    case 500:
                        throw new DomeApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.DomeApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.DomeApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.DomeApiTimeoutError("Timeout exceeded when calling GET /search/stream.");
                case "unknown":
                    throw new errors.DomeApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            const bearer = yield core.Supplier.get(this._options.token);
            if (bearer != null) {
                return `Bearer ${bearer}`;
            }
            return undefined;
        });
    }
}
exports.Search = Search;
