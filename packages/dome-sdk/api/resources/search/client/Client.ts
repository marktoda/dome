/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as DomeApi from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Search {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Search {
    constructor(protected readonly _options: Search.Options) {}

    /**
     * Performs a paginated search over indexed content.
     *
     * @param {DomeApi.GetSearchRequest} request
     * @param {Search.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.BadRequestError}
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.search.searchContent({
     *         q: "q"
     *     })
     */
    public searchContent(
        request: DomeApi.GetSearchRequest,
        requestOptions?: Search.RequestOptions,
    ): core.HttpResponsePromise<DomeApi.SearchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__searchContent(request, requestOptions));
    }

    private async __searchContent(
        request: DomeApi.GetSearchRequest,
        requestOptions?: Search.RequestOptions,
    ): Promise<core.WithRawResponse<DomeApi.SearchResponse>> {
        const { q, limit, offset, category, mimeType, startDate, endDate, useCache } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["q"] = q;
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        if (category != null) {
            _queryParams["category"] = category;
        }

        if (mimeType != null) {
            _queryParams["mimeType"] = mimeType;
        }

        if (startDate != null) {
            _queryParams["startDate"] = startDate.toString();
        }

        if (endDate != null) {
            _queryParams["endDate"] = endDate.toString();
        }

        if (useCache != null) {
            _queryParams["useCache"] = useCache.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "search",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.SearchResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DomeApi.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new DomeApi.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new DomeApi.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.DomeApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DomeApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.DomeApiTimeoutError("Timeout exceeded when calling GET /search.");
            case "unknown":
                throw new errors.DomeApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Performs a search and streams results as NDJSON events.
     *
     * @param {DomeApi.GetSearchStreamRequest} request
     * @param {Search.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.BadRequestError}
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.search.streamSearchContentNdjson({
     *         q: "q"
     *     })
     */
    public streamSearchContentNdjson(
        request: DomeApi.GetSearchStreamRequest,
        requestOptions?: Search.RequestOptions,
    ): core.HttpResponsePromise<DomeApi.StreamingSearchEvent> {
        return core.HttpResponsePromise.fromPromise(this.__streamSearchContentNdjson(request, requestOptions));
    }

    private async __streamSearchContentNdjson(
        request: DomeApi.GetSearchStreamRequest,
        requestOptions?: Search.RequestOptions,
    ): Promise<core.WithRawResponse<DomeApi.StreamingSearchEvent>> {
        const { q, limit, offset, category, mimeType, startDate, endDate, useCache } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["q"] = q;
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        if (category != null) {
            _queryParams["category"] = category;
        }

        if (mimeType != null) {
            _queryParams["mimeType"] = mimeType;
        }

        if (startDate != null) {
            _queryParams["startDate"] = startDate.toString();
        }

        if (endDate != null) {
            _queryParams["endDate"] = endDate.toString();
        }

        if (useCache != null) {
            _queryParams["useCache"] = useCache.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "search/stream",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.StreamingSearchEvent.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DomeApi.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new DomeApi.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new DomeApi.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.DomeApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DomeApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.DomeApiTimeoutError("Timeout exceeded when calling GET /search/stream.");
            case "unknown":
                throw new errors.DomeApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
