/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as DomeApi from "../../../index";
export declare namespace ContentNotion {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class ContentNotion {
    protected readonly _options: ContentNotion.Options;
    constructor(_options: ContentNotion.Options);
    /**
     * @param {DomeApi.RegisterNotionWorkspaceBody} request
     * @param {ContentNotion.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.BadRequestError}
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.contentNotion.registerNotionWorkspace()
     */
    registerNotionWorkspace(request?: DomeApi.RegisterNotionWorkspaceBody, requestOptions?: ContentNotion.RequestOptions): Promise<DomeApi.NotionWorkspaceResponse>;
    /**
     * @param {string} workspaceId
     * @param {ContentNotion.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.NotFoundError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.contentNotion.getNotionWorkspaceSyncHistory("notion_ws_123")
     */
    getNotionWorkspaceSyncHistory(workspaceId: string, requestOptions?: ContentNotion.RequestOptions): Promise<DomeApi.NotionSyncHistoryResponse>;
    /**
     * @param {string} workspaceId
     * @param {ContentNotion.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.NotFoundError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.contentNotion.triggerNotionWorkspaceSync("notion_ws_123")
     */
    triggerNotionWorkspaceSync(workspaceId: string, requestOptions?: ContentNotion.RequestOptions): Promise<DomeApi.NotionGenericSuccessResponse>;
    /**
     * @param {DomeApi.ConfigureNotionOAuthBody} request
     * @param {ContentNotion.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.BadRequestError}
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.ForbiddenError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.contentNotion.configureNotionOAuthCredentialsInternalAdmin()
     */
    configureNotionOAuthCredentialsInternalAdmin(request?: DomeApi.ConfigureNotionOAuthBody, requestOptions?: ContentNotion.RequestOptions): Promise<DomeApi.NotionGenericSuccessResponse>;
    /**
     * @param {ContentNotion.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.contentNotion.getNotionOAuthAuthorizationUrl()
     */
    getNotionOAuthAuthorizationUrl(requestOptions?: ContentNotion.RequestOptions): Promise<DomeApi.NotionOAuthUrlResponse>;
    /**
     * @param {DomeApi.StoreNotionIntegrationBody} request
     * @param {ContentNotion.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.BadRequestError}
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.contentNotion.storeNotionOAuthIntegrationCallback({
     *         code: "auth_code_from_notion"
     *     })
     */
    storeNotionOAuthIntegrationCallback(request: DomeApi.StoreNotionIntegrationBody, requestOptions?: ContentNotion.RequestOptions): Promise<DomeApi.NotionGenericSuccessResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
