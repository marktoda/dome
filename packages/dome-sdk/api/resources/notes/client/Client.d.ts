/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as DomeApi from "../../../index";
export declare namespace Notes {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Notes {
    protected readonly _options: Notes.Options;
    constructor(_options: Notes.Options);
    /**
     * @param {DomeApi.GetNotesRequest} request
     * @param {Notes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.notes.listNotes({
     *         limit: 50,
     *         offset: 0
     *     })
     */
    listNotes(request?: DomeApi.GetNotesRequest, requestOptions?: Notes.RequestOptions): Promise<DomeApi.Note[]>;
    /**
     * @param {DomeApi.IngestNoteBodyApiSchema} request
     * @param {Notes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.BadRequestError}
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.notes.ingestANewNote({
     *         content: "Content for the new note."
     *     })
     */
    ingestANewNote(request: DomeApi.IngestNoteBodyApiSchema, requestOptions?: Notes.RequestOptions): Promise<DomeApi.Note>;
    /**
     * @param {string} id
     * @param {Notes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.NotFoundError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.notes.getANoteById("note_123abc")
     */
    getANoteById(id: string, requestOptions?: Notes.RequestOptions): Promise<DomeApi.Note>;
    /**
     * @param {string} id
     * @param {Notes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.NotFoundError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.notes.deleteANote("note_123abc")
     */
    deleteANote(id: string, requestOptions?: Notes.RequestOptions): Promise<DomeApi.DeleteSuccessResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
