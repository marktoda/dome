/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DomeApi from "../../api/index";
import * as core from "../../core";
import { StreamingMetadata } from "./StreamingMetadata";
import { StreamingResultData } from "./StreamingResultData";
import { StreamingErrorData } from "./StreamingErrorData";

export const StreamingSearchEvent: core.serialization.Schema<
    serializers.StreamingSearchEvent.Raw,
    DomeApi.StreamingSearchEvent
> = core.serialization
    .union("type", {
        metadata: StreamingMetadata,
        result: StreamingResultData,
        error: StreamingErrorData,
    })
    .transform<DomeApi.StreamingSearchEvent>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace StreamingSearchEvent {
    export type Raw = StreamingSearchEvent.Metadata | StreamingSearchEvent.Result | StreamingSearchEvent.Error;

    export interface Metadata extends StreamingMetadata.Raw {
        type: "metadata";
    }

    export interface Result extends StreamingResultData.Raw {
        type: "result";
    }

    export interface Error extends StreamingErrorData.Raw {
        type: "error";
    }
}
