/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "./core";
import { Auth } from "./api/resources/auth/client/Client";
import { Notes } from "./api/resources/notes/client/Client";
import { Search } from "./api/resources/search/client/Client";
import { ContentGitHub } from "./api/resources/contentGitHub/client/Client";
import { ContentSync } from "./api/resources/contentSync/client/Client";
import { ContentNotion } from "./api/resources/contentNotion/client/Client";
import { Ai } from "./api/resources/ai/client/Client";
export declare namespace DomeApiClient {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class DomeApiClient {
    protected readonly _options: DomeApiClient.Options;
    protected _auth: Auth | undefined;
    protected _notes: Notes | undefined;
    protected _search: Search | undefined;
    protected _contentGitHub: ContentGitHub | undefined;
    protected _contentSync: ContentSync | undefined;
    protected _contentNotion: ContentNotion | undefined;
    protected _ai: Ai | undefined;
    constructor(_options: DomeApiClient.Options);
    get auth(): Auth;
    get notes(): Notes;
    get search(): Search;
    get contentGitHub(): ContentGitHub;
    get contentSync(): ContentSync;
    get contentNotion(): ContentNotion;
    get ai(): Ai;
}
