/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as DomeApi from "../../../index";
export declare namespace Chat {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Chat {
    protected readonly _options: Chat.Options;
    constructor(_options: Chat.Options);
    /**
     * Initiates a WebSocket connection for real-time chat. Requires a valid authentication token as a query parameter. Upon successful upgrade, the protocol switches to WebSocket. Messages over WebSocket should follow the documented format (e.g., JSON with type and payload).
     *
     * @param {DomeApi.GetChatWsRequest} request
     * @param {Chat.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.UnauthorizedError}
     *
     * @example
     *     await client.chat.upgradeToWebSocketForChat({
     *         token: "jwt_token_here"
     *     })
     */
    upgradeToWebSocketForChat(request?: DomeApi.GetChatWsRequest, requestOptions?: Chat.RequestOptions): Promise<void>;
    /**
     * Processes a user chat message and returns a response.
     *
     * @param {DomeApi.PostChatRequest} request
     * @param {Chat.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.BadRequestError}
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.chat.sendAChatMessage({
     *         userId: "userId",
     *         messages: [{
     *                 role: "user",
     *                 content: "content"
     *             }],
     *         options: {}
     *     })
     */
    sendAChatMessage(request: DomeApi.PostChatRequest, requestOptions?: Chat.RequestOptions): Promise<DomeApi.ChatSuccessResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
