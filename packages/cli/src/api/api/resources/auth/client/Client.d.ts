/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as DomeApi from "../../../index";
export declare namespace Auth {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Auth {
    protected readonly _options: Auth.Options;
    constructor(_options: Auth.Options);
    /**
     * Authenticates a user and returns a JWT token upon successful login.
     *
     * @param {DomeApi.LoginBody} request
     * @param {Auth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.BadRequestError}
     * @throws {@link DomeApi.UnauthorizedError}
     *
     * @example
     *     await client.auth.userLogin({
     *         email: "mark@example.com",
     *         password: "hunter2"
     *     })
     */
    userLogin(request: DomeApi.LoginBody, requestOptions?: Auth.RequestOptions): Promise<DomeApi.LoginResponse>;
    /**
     * Registers a new user and returns a JWT token.
     *
     * @param {DomeApi.RegisterBody} request
     * @param {Auth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.BadRequestError}
     * @throws {@link DomeApi.ConflictError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.auth.userRegistration({
     *         email: "newuser@example.com",
     *         password: "securepassword123",
     *         name: "New User"
     *     })
     */
    userRegistration(request: DomeApi.RegisterBody, requestOptions?: Auth.RequestOptions): Promise<DomeApi.RegisterResponse>;
    /**
     * Invalidates the user's session/token.
     *
     * @param {Auth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.auth.userLogout()
     */
    userLogout(requestOptions?: Auth.RequestOptions): Promise<DomeApi.LogoutResponse>;
    /**
     * Validates the provided JWT and returns user information if valid.
     *
     * @param {Auth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DomeApi.UnauthorizedError}
     * @throws {@link DomeApi.InternalServerError}
     *
     * @example
     *     await client.auth.validateAuthenticationToken()
     */
    validateAuthenticationToken(requestOptions?: Auth.RequestOptions): Promise<DomeApi.ValidateTokenResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
