import { z } from 'zod';
import { ContentCategoryEnum, MimeTypeSchema } from './siloContent';

/**
 * Schema for enriched content metadata generated by AI processing
 */
export const EnrichedMetadataSchema = z.object({
  // Basic metadata
  title: z.string().optional(),
  summary: z.string().optional(),

  // Extracted items
  todos: z.array(
    z.object({
      text: z.string(),
      dueDate: z.string().optional(), // ISO date if detected
      priority: z.enum(['high', 'medium', 'low']).optional(),
    })
  ).optional(),

  reminders: z.array(
    z.object({
      text: z.string(),
      reminderTime: z.string().optional(), // ISO date if detected
    })
  ).optional(),

  // Classification
  topics: z.array(z.string()).optional(),
  sentiment: z.enum(['positive', 'neutral', 'negative']).optional(),

  // Processing metadata
  processingVersion: z.number().int().positive(),
  modelUsed: z.string(),
  error: z.string().optional(),
});

export type EnrichedMetadata = z.infer<typeof EnrichedMetadataSchema>;

/**
 * Schema for messages sent to the enriched-content queue
 * This is used by both the AI Processor service (sender) and Silo service (receiver)
 */
export const EnrichedContentMessageSchema = z.object({
  // Content identifiers
  id: z.string().min(1, 'Content ID is required'),
  userId: z.string().nullable(),

  // Content type information (matching Silo schema)
  category: ContentCategoryEnum,
  mimeType: MimeTypeSchema,

  // Enriched metadata
  metadata: EnrichedMetadataSchema,

  // Processing metadata
  timestamp: z.number().int(),
});

export type EnrichedContentMessage = z.infer<typeof EnrichedContentMessageSchema>;
